import numpy as np import matplotlib.pyplot as plt import seaborn as sns import xarray as xr from matplotlib.gridspec import GridSpec from matplotlib.lines import Line2D import pandas as pd # Statistical Constants CONFIDENCE_LEVEL = 0.95 # 95% confidence intervals ALPHA = 0.05 # Significance level MIN_EVENT_DURATION = 5 # Minimum consecutive months for ENSO event def classify_enso_state(da_nino34, eruption_year=1258, months_before=6): """ Classify ENSO state using standard thresholds with uncertainty quantification. Parameters: ----------- da_nino34 : xarray.DataArray NINO3.4 index anomalies eruption_year : int Year of eruption months_before : int Months before eruption to analyze Returns: -------- classifications : xarray.DataArray ENSO state classification for each member confidence : xarray.DataArray Confidence level for each classification """ # Input validation assert months_before >= 3, "Need at least 3 months for classification" # Select pre-eruption period start_date = cftime.DatetimeNoLeap(eruption_year-1, 13-months_before, 1) end_date = cftime.DatetimeNoLeap(eruption_year-1, 12, 31) pre_eruption = da_nino34.sel(time=slice(start_date, end_date)) # Calculate mean and confidence intervals mean_state = pre_eruption.mean(dim='time') std_err = pre_eruption.std(dim='time') / np.sqrt(months_before) ci_width = std_err * stats.t.ppf((1 + CONFIDENCE_LEVEL)/2, months_before-1) # Classification with confidence conditions = [ ((mean_state - ci_width) > 1.5, 'Strong El Niño'), ((mean_state + ci_width) > 0.5, 'Moderate El Niño'), ((mean_state + ci_width) < -1.5, 'Strong La Niña'), ((mean_state - ci_width) < -0.5, 'Moderate La Niña'), (True, 'Neutral') ] classifications = xr.full_like(mean_state, 'Neutral', dtype='<U15') confidence = xr.full_like(mean_state, 0.0) for cond, label in conditions: mask = cond classifications = xr.where(mask, label, classifications) confidence = xr.where(mask, CONFIDENCE_LEVEL, confidence) return classifications, confidence def plot_enso_annual_evolution_with_caption(da_nino34, force, classifications, eruption_year=1258): """ Plot annual PDFs of NINO3.4 anomalies from pre-eruption to 5 years post-eruption, grouped by initial ENSO state, with statistical summary caption. Parameters: ----------- da_nino34 : xarray.DataArray NINO3.4 index data with dimensions (member, time) classifications : xarray.DataArray ENSO state classifications for each member eruption_year : int Year of the eruption event """ # Define states and colors states = ['Strong El Niño', 'Moderate El Niño', 'Neutral', 'Moderate La Niña', 'Strong La Niña'] state_colors = ['#8B0000', '#CD5C5C', '#808080', '#4169E1', '#00008B'] # Define years to plot years = { 'Y -1': eruption_year - 1, 'Y 0': eruption_year + 0, 'Y +1': eruption_year + 1, 'Y +2': eruption_year + 2, 'Y +3': eruption_year + 3, 'Y +4': eruption_year + 4, 'Y +5': eruption_year + 5 } # Create colormap for years year_colors = plt.cm.turbo(np.linspace(0, 1, len(years))) year_cmap = dict(zip(years.keys(), year_colors)) # Prepare data storage for statistics stats_data = [] # Create figure with GridSpec for main plot and caption fig = plt.figure(figsize=(14, 10)) gs = GridSpec(2, 1, height_ratios=[0.85, 0.15], figure=fig) ax = fig.add_subplot(gs[0]) # Plot PDFs for each state and year for state, state_color in zip(states, state_colors): members = classifications.where(classifications == state, drop=True).member if len(members) == 0: continue for label, year_val in years.items(): # Extract annual data annual_data = da_nino34.sel(member=members).where( da_nino34.time.dt.year == year_val, drop=True ).mean(dim='time').values # Store for statistics for val in annual_data: stats_data.append({ 'State': state, 'Year': label, 'NINO3.4': val }) # Plot KDE with unique color and style sns.kdeplot( annual_data, ax=ax, color=year_cmap[label], linestyle='-' if 'Y' in label else '--', linewidth=3 if label in ['Pre', 'Y0'] else 2, alpha=0.9, label=f'{state} - {label}' ) # Add reference lines ax.axvline(0, color='black', linestyle='-', alpha=0.3, zorder=0) ax.axvline(0.5, color='red', linestyle=':', alpha=0.5, zorder=0) ax.axvline(-0.5, color='blue', linestyle=':', alpha=0.5, zorder=0) # Configure plot ax.set_title(f'KDE Nino 3.4 Temperature: {eruption_year} {force} ', fontsize=16, pad=20) ax.set_xlabel('NINO3.4 Anomaly (°C)', fontsize=12) ax.set_ylabel('Probability Density', fontsize=12) ax.set_xlim([-5, 5]) ax.set_ylim([0, 1.75]) ax.grid(alpha=0.2) # Add eruption indicator #eruption_line = ax.axvline(0, color='purple', linewidth=8, alpha=0.15, zorder=-1) # Create custom legend elements state_handles = [ Line2D([0], [0], color=state_color, lw=5, label=state) for state, state_color in zip(states, state_colors) ] year_handles = [ Line2D([0], [0], color=color, lw=2, label=label) for label, color in year_cmap.items() ] # Add dual legends ax.legend(handles=year_handles, loc='upper right', title="Time Period", frameon=True, framealpha=0.9) # Add visual time reference # Add caption with statistical summary caption_ax = fig.add_subplot(gs[1]) caption_ax.axis('off') # Calculate statistics stats_df = pd.DataFrame(stats_data) summary_stats = stats_df.groupby(['State', 'Year'])['NINO3.4'].agg(['mean', 'std']) summary_stats = summary_stats.reset_index() # Format caption text eruption_ref = f"Eruption Year {eruption_year} (Year 0)" caption_text = f"ENSO State Evolution Analysis | {eruption_ref}\n\n" for state in states: state_data = summary_stats[summary_stats['State'] == state] if state_data.empty: continue plt.tight_layout() return fig. def season_nino34(m): DA_DJF = m.sel(time=m.time.dt.season=="DJF") djf34ja, jja34ja = season_nino34(jan_nino34) djf34a, jja34a = season_nino34(apr_nino34) djf34ju, jja34ju = season_nino34(july_nino34) djf34o, jja34o = season_nino34(oct_nino34) DA_JJA = m.sel(time=m.time.dt.season=="JJA") return DA_DJF, DA_JJA # Example usage: force ='January_5x' classifications = classify_enso_state(jan_nino34)[0] fig = plot_enso_annual_evolution_with_caption(jan_nino34, force, classifications, eruption_year=1258) plt.savefig(force +'kde_caption.png', dpi=300, bbox_inches='tight')
